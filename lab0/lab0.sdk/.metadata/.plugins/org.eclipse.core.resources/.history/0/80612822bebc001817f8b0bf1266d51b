/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 *

#include <stdio.h>
#include "platform.h"

void print(char *str);

int main()
{
    init_platform();

    print("Hello World\n\r");

    return 0;
}
*/

#include "xparameters.h"
#include "xgpio.h"
#include "xuartps.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
//====================================================
int main (void)
{
//Pointer	and	variable	declaration
	XGpio dip,	push,	leds;
	int i,	psb_status,	sw_code;
	xil_printf("-- Start	of	the	Program	--\r\n");
	//	Pointer	initialization
	//	Check	out	your	own	XPAR	ID	symbol	name	declared	in	xparameters.h
	//	The	format	is	always	XPAR_<NAME_IN_VIVADO>_DEVICE_ID
	XGpio_Initialize(&dip,	XPAR_SWITCHES_DEVICE_ID);
	XGpio_SetDataDirection(&dip,	1,	0xffffffff);
	XGpio_Initialize(&push,	XPAR_BUTTONS_DEVICE_ID);
	XGpio_SetDataDirection(&push,	1,	0xffffffff);
	XGpio_Initialize(&leds,	XPAR_LEDS_DEVICE_ID);
	XGpio_SetDataDirection(&leds,	1,	0x00000000);
	//Read	the	initial	buttons	status
	psb_status	=	XGpio_DiscreteRead(&push,	1);
	xil_printf("Initial	Push	Buttons	Status	(should	be	0)	%x\r\n",	psb_status);


	while (1)
	{

		int r = rand() / (RAND_MAX / 16 + 1);
		xil_printf("Generated number:	%x\r\n",	r);
		//	Read	value	of	buttons
		psb_status	=	XGpio_DiscreteRead(&push,	1);
		if(psb_status)
		{
		xil_printf("A	button	has	been	pressed:	%x\r\n",	psb_status);
		//	Read	value	of	switches
			sw_code	=	XGpio_DiscreteRead(&dip,	1);
			xil_printf("The	code	detected	is:	%x\r\n",	sw_code);
			//	Write	code	of	switches	to	leds (example)
				XGpio_DiscreteWrite(&leds,	1,	sw_code);
			}
			//	Waiting	cycles
			for (i=0;	i<9999999;	i++);
	}
}
